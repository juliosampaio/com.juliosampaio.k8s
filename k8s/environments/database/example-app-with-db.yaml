# Example application deployment that uses the shared PostgreSQL database
# This shows how external applications can connect to the shared database

apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: production  # or stage
  labels:
    app: example-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
    spec:
      containers:
      - name: example-app
        image: your-registry/example-app:latest
        ports:
        - containerPort: 8080
        env:
        # Database connection using the secret created by create-app-database.sh
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: example-app-db-secret
              key: DB_HOST
        - name: DATABASE_PORT
          valueFrom:
            secretKeyRef:
              name: example-app-db-secret
              key: DB_PORT
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: example-app-db-secret
              key: DB_NAME
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: example-app-db-secret
              key: DB_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: example-app-db-secret
              key: DB_PASSWORD
        # Alternative: Direct connection string
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: example-app-service
  namespace: production  # or stage
  labels:
    app: example-app
spec:
  selector:
    app: example-app
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-app-ingress
  namespace: production  # or stage
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  tls:
    - hosts:
        - example.juliosampaio.com  # or example.stage.juliosampaio.com
      secretName: example-app-tls
  rules:
    - host: example.juliosampaio.com  # or example.stage.juliosampaio.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: example-app-service
                port:
                  number: 80 