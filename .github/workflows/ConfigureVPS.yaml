name: ConfigureVPS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - host: k8s-cluster-main
            system: aarch64-linux
            ip: K8S_CLUSTER_MAIN_IP
            username: K8S_CLUSTER_MAIN_USER
            password: K8S_CLUSTER_MAIN_PASSWORD
          - host: k8s-cluster-node-1
            system: aarch64-linux
            ip: K8S_CLUSTER_NODE1_IP
            username: K8S_CLUSTER_NODE1_USER
            password: K8S_CLUSTER_NODE1_PASSWORD

    steps:
      - uses: actions/checkout@v3

      - name: Install Nix CLI locally
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-23.11

      - name: Enable flakes & allow ARM builds locally
        run: |
          mkdir -p ~/.config/nix
          cat > ~/.config/nix/nix.conf <<'EOF'
          experimental-features = nix-command flakes
          extra-platforms = aarch64-linux x86_64-linux
          EOF

      - name: Enable aarch64 emulation on runner
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          sudo update-binfmt --enable qemu-aarch64 || true

      # 1) Bootstrap Nix on the remote, if needed
      - name: Bootstrap Nix on ${{ matrix.host }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets[matrix.ip] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
          script: |
            if ! command -v nix >/dev/null 2>&1; then
              echo "Nix not found ➜ installing…"

              # clean up artefacts of aborted installs to keep script idempotent
              find /etc -maxdepth 1 -name '*backup-before-nix' -print -exec rm -f {} +

              # install deb dependencies
              apt-get update
              apt-get install -y xz-utils curl sudo

              # non-interactive, daemon mode
              sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon --yes
            fi
            # ensure required nix.conf settings
            mkdir -p /etc/nix
            cat >/etc/nix/nix.conf <<'EON'
            experimental-features = nix-command flakes
            require-sigs = false
            trusted-users = root ${{ secrets[matrix.username] }}
            EON

            # ensure user profile bin is on PATH for future login shells
            cat >/etc/profile.d/nix-user-profile.sh <<'EOP'
            if [ -d "$HOME/.nix-profile/bin" ]; then
              PATH="$HOME/.nix-profile/bin:$PATH"
            fi
            export PATH
            EOP
            chmod 644 /etc/profile.d/nix-user-profile.sh

      # 2) Build the flake output for this host
      - name: Build flake for ${{ matrix.host }}
        id: build
        run: |
          nix build .#packages.${{ matrix.system }}.${{ matrix.host }} -o result
          echo "STORE_PATH=$(readlink -f result)" >> "$GITHUB_ENV"

      # 1.5) Set up SSH key for passwordless copy
      - name: Set up SSH key for copy
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3) Push the closure to the remote
      - name: Copy closure to ${{ matrix.host }}
        env:
          SSH_USER: ${{ secrets[matrix.username] }}
          SSH_HOST: ${{ secrets[matrix.ip] }}
          NIX_SSHOPTS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          STORE_PATH: ${{ env.STORE_PATH }}
        run: |
          # Use the newer ssh-ng transport which keeps a single persistent
          # control connection instead of spawning hundreds of short ssh
          # sessions (which can be throttled by the VPS or interrupted by
          # GitHub runners).  Add ControlMaster to reuse the socket.
          export NIX_SSHOPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPersist=5m -o ControlPath=/tmp/ssh-%r@%h:%p"
          nix copy --no-check-sigs --to "ssh-ng://$SSH_USER@$SSH_HOST" "$STORE_PATH" &
          COPY_PID=$!
          while kill -0 "$COPY_PID" 2>/dev/null; do
            echo "still copying… (pid $COPY_PID)"
            sleep 30
          done
          wait "$COPY_PID"

      # 4) Activate on the remote
      - name: Activate on ${{ matrix.host }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets[matrix.ip] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
          envs: STORE_PATH
          script: |
            # ensure nix is on PATH for this non-login shell
            source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh || true
            echo "Activating $STORE_PATH…"
            nix-env --profile $HOME/.nix-profile --set "$STORE_PATH"

      # 5) Provision and start k3s (server on control-plane, agent on workers)
      - name: Configure k3s on ${{ matrix.host }}
        uses: appleboy/ssh-action@v0.1.7
        env:
          HOST_NAME: ${{ matrix.host }}
          K3S_TOKEN: ${{ secrets.K3S_CLUSTER_TOKEN }}
          SERVER_IP: ${{ secrets.K8S_CLUSTER_MAIN_IP }}
        with:
          host: ${{ secrets[matrix.ip] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
          envs: HOST_NAME,K3S_TOKEN,SERVER_IP
          script: |
            set -e

            # ensure nix profile binaries are on PATH for this non-login shell
            source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh || true

            # Path to the k3s binary inside the nix profile
            K3S_BIN="$HOME/.nix-profile/bin/k3s"

            if [ ! -x "$K3S_BIN" ]; then
              echo "k3s binary not found in nix profile ($K3S_BIN)" >&2
              exit 1
            fi

            # Use the official k3s install script to generate/update the systemd unit.
            # We SKIP the binary download so it reuses the one provided by Nix.
            INSTALL_ENV="INSTALL_K3S_SKIP_DOWNLOAD=true INSTALL_K3S_BIN_DIR=$HOME/.nix-profile/bin"

            if [ "$HOST_NAME" = "k8s-cluster-main" ]; then
              echo "### Installing/updating k3s server service"
              curl -sfL https://get.k3s.io | \
                env INSTALL_K3S_SKIP_DOWNLOAD=true \
                    INSTALL_K3S_BIN_DIR="$HOME/.nix-profile/bin" \
                    K3S_TOKEN="$K3S_TOKEN" \
                    sh -s - server --write-kubeconfig-mode 644 --disable traefik --disable metrics-server
            else
              echo "### Installing/updating k3s agent service"
              curl -sfL https://get.k3s.io | \
                env INSTALL_K3S_SKIP_DOWNLOAD=true \
                    INSTALL_K3S_BIN_DIR="$HOME/.nix-profile/bin" \
                    K3S_URL="https://$SERVER_IP:6443" \
                    K3S_TOKEN="$K3S_TOKEN" \
                    sh -s - agent
            fi

            echo "k3s systemd service ready on $HOST_NAME"
