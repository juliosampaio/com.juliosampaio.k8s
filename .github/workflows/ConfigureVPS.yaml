name: ConfigureVPS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: [k8s-cluster-main, k8s-cluster-node-1]
        include:
          - host: k8s-cluster-main
            ip: K8S_CLUSTER_MAIN_IP
            username: K8S_CLUSTER_MAIN_USER
            password: K8S_CLUSTER_MAIN_PASSWORD
          - host: k8s-cluster-node-1
            ip: K8S_CLUSTER_NODE1_IP
            username: K8S_CLUSTER_NODE1_USER
            password: K8S_CLUSTER_NODE1_PASSWORD

    steps:
      - uses: actions/checkout@v3

      - name: Install Nix CLI locally
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-23.11

      - name: Enable flakes locally
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" > ~/.config/nix/nix.conf

      # 1) Bootstrap Nix on the remote, if needed
      - name: Bootstrap Nix on ${{ matrix.host }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets[matrix.ip] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
          script: |
            if ! command -v nix >/dev/null 2>&1; then
              echo "Nix not found ➜ installing…"
              # install deb dependencies
              apt-get update
              apt-get install -y xz-utils curl sudo
              # run Nix install script
              sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon
              # enable flakes
              mkdir -p /etc/nix
              echo "experimental-features = nix-command flakes" > /etc/nix/nix.conf
            else
              echo "Nix already installed, skipping bootstrap."
            fi

      # 2) Build the flake output for this host
      - name: Build flake for ${{ matrix.host }}
        run: nix build .#packages.x86_64-linux.${{ matrix.host }} -o result

      # 3) Push the closure to the remote
      - name: Copy closure to ${{ matrix.host }}
        env:
          SSH_USER: ${{ secrets[matrix.username] }}
          SSH_PASS: ${{ secrets[matrix.password] }}
          SSH_HOST: ${{ secrets[matrix.ip] }}
          NIX_SSHOPTS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          sshpass -p "$SSH_PASS" nix copy --to "ssh://$SSH_USER@$SSH_HOST" result

      # 4) Activate on the remote
      - name: Activate on ${{ matrix.host }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets[matrix.ip] }}
          username: ${{ secrets[matrix.username] }}
          password: ${{ secrets[matrix.password] }}
          script: |
            # ensure nix is on PATH for this non-login shell
            source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh || true
            # find the store path we just copied (matches host name)
            STORE_PATH=$(ls /nix/store | grep "${{ matrix.host }}" | head -n1)
            if [ -z "$STORE_PATH" ]; then
              echo "ERROR: Could not locate copied store path for ${{ matrix.host }}" >&2
              exit 1
            fi
            echo "Activating /nix/store/$STORE_PATH…"
            nix-env --profile $HOME/.nix-profile --set "/nix/store/$STORE_PATH"
